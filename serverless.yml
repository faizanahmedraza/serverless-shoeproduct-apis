# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shoesstore-lambdafn
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  # Version of hashing algorithm used by Serverless Framework for function packaging
  lambdaHashingVersion: 20201221

  # you can overwrite defaults here
  # Default stage (default: dev)
  stage: dev
  # Default region (default: us-east-1)
  region: us-west-1
  # The AWS profile to use to deploy (default: "default" profile)
  profile: faizanahmedraza35LambdaUser
  # enable cors
  httpApi:
    cors: true

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["ShoeProductsTable", "Arn"] }

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**
	
package:
  individually: true

functions:
  createShoeProduct:
    handler: src/handlers.createShoeProduct
    events:
      - httpApi:
          path: /shoe-products
          method: post
  getShoeProduct:
    handler: src/handlers.getShoeProduct
    events:
      - httpApi:
          path: /shoe-products/{id}
          method: get
  updateShoeProduct:
    handler: src/handlers.updateShoeProduct
    events:
      - httpApi:
          path: /shoe-products/{id}
          method: put
  deleteShoeProduct:
    handler: src/handlers.deleteShoeProduct
    events:
      - httpApi:
          path: /shoe-products/{id}
          method: delete
  listShoeProduct:
    handler: src/handlers.listShoeProduct
    events:
      - httpApi:
          path: /shoe-products
          method: get

plugins:
  - serverless-plugin-typescript

resources:
  Resources:
    ShoeProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ShoeProductsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: shoeProductID
            AttributeType: S
        KeySchema:
          - AttributeName: shoeProductID
            KeyType: HASH
